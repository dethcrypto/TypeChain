/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { AbiItem } from "web3-utils";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type leveled = ContractEventLog<{
  owner: string;
  level: string;
  summoner: string;
  0: string;
  1: string;
  2: string;
}>;
export type summoned = ContractEventLog<{
  owner: string;
  class: string;
  summoner: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RarityConstructor {
  constructor(
    jsonInterface: AbiItem[],
    address?: string,
    options?: ContractOptions
  ): Rarity;
}

export interface Rarity extends BaseContract {
  clone(): Rarity;
  methods: {
    adventure(
      _summoner: number | string | BN
    ): NonPayableTransactionObject<void>;

    adventurers_log(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    approve(
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    class(arg0: number | string | BN): NonPayableTransactionObject<string>;

    classes(id: number | string | BN): NonPayableTransactionObject<string>;

    getApproved(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    level(arg0: number | string | BN): NonPayableTransactionObject<string>;

    level_up(
      _summoner: number | string | BN
    ): NonPayableTransactionObject<void>;

    next_summoner(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    spend_xp(
      _summoner: number | string | BN,
      _xp: number | string | BN
    ): NonPayableTransactionObject<void>;

    summon(_class: number | string | BN): NonPayableTransactionObject<void>;

    summoner(_summoner: number | string | BN): NonPayableTransactionObject<{
      _xp: string;
      _log: string;
      _class: string;
      _level: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    tokenByIndex(
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    tokenOfOwnerByIndex(
      owner: string,
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    tokenURI(
      _summoner: number | string | BN
    ): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    xp(arg0: number | string | BN): NonPayableTransactionObject<string>;

    xp_required(
      curent_level: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    leveled(cb?: Callback<leveled>): EventEmitter;
    leveled(options?: EventOptions, cb?: Callback<leveled>): EventEmitter;

    summoned(cb?: Callback<summoned>): EventEmitter;
    summoned(options?: EventOptions, cb?: Callback<summoned>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "leveled", cb: Callback<leveled>): void;
  once(event: "leveled", options: EventOptions, cb: Callback<leveled>): void;

  once(event: "summoned", cb: Callback<summoned>): void;
  once(event: "summoned", options: EventOptions, cb: Callback<summoned>): void;
}
