/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { AbiItem } from "web3-utils";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AnonEvent1 = ContractEventLog<{
  value1: string;
  0: string;
}>;
export type Event1 = ContractEventLog<{
  value1: string;
  value2: string;
  0: string;
  1: string;
}>;
export type Event2 = ContractEventLog<{
  0: string;
}>;
export type Event3_bool_uint256 = ContractEventLog<{
  value1: boolean;
  value2: string;
  0: boolean;
  1: string;
}>;
export type Event3_uint256 = ContractEventLog<{
  value1: string;
  0: string;
}>;
export type Event4 = ContractEventLog<{
  data: [string, string];
  0: [string, string];
}>;
export type NoArgsEvent = ContractEventLog<{}>;
export type UpdateFrequencySet = ContractEventLog<{
  0: string[];
  1: string[];
}>;

export interface EventsConstructor {
  constructor(
    jsonInterface: AbiItem[],
    address?: string,
    options?: ContractOptions
  ): Events;
}

export interface Events extends BaseContract {
  clone(): Events;
  methods: {
    emit_anon1(): NonPayableTransactionObject<void>;

    emit_event1(): NonPayableTransactionObject<void>;

    emit_event2(): NonPayableTransactionObject<void>;

    emit_event3(): NonPayableTransactionObject<void>;

    emit_event3_overloaded(): NonPayableTransactionObject<void>;

    emit_event4(): NonPayableTransactionObject<void>;
  };
  events: {
    Event1(cb?: Callback<Event1>): EventEmitter;
    Event1(options?: EventOptions, cb?: Callback<Event1>): EventEmitter;

    Event2(cb?: Callback<Event2>): EventEmitter;
    Event2(options?: EventOptions, cb?: Callback<Event2>): EventEmitter;

    "Event3(bool,uint256)"(cb?: Callback<Event3_bool_uint256>): EventEmitter;
    "Event3(bool,uint256)"(
      options?: EventOptions,
      cb?: Callback<Event3_bool_uint256>
    ): EventEmitter;

    "Event3(uint256)"(cb?: Callback<Event3_uint256>): EventEmitter;
    "Event3(uint256)"(
      options?: EventOptions,
      cb?: Callback<Event3_uint256>
    ): EventEmitter;

    Event4(cb?: Callback<Event4>): EventEmitter;
    Event4(options?: EventOptions, cb?: Callback<Event4>): EventEmitter;

    NoArgsEvent(cb?: Callback<NoArgsEvent>): EventEmitter;
    NoArgsEvent(
      options?: EventOptions,
      cb?: Callback<NoArgsEvent>
    ): EventEmitter;

    UpdateFrequencySet(cb?: Callback<UpdateFrequencySet>): EventEmitter;
    UpdateFrequencySet(
      options?: EventOptions,
      cb?: Callback<UpdateFrequencySet>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Event1", cb: Callback<Event1>): void;
  once(event: "Event1", options: EventOptions, cb: Callback<Event1>): void;

  once(event: "Event2", cb: Callback<Event2>): void;
  once(event: "Event2", options: EventOptions, cb: Callback<Event2>): void;

  once(event: "Event4", cb: Callback<Event4>): void;
  once(event: "Event4", options: EventOptions, cb: Callback<Event4>): void;

  once(event: "NoArgsEvent", cb: Callback<NoArgsEvent>): void;
  once(
    event: "NoArgsEvent",
    options: EventOptions,
    cb: Callback<NoArgsEvent>
  ): void;

  once(event: "UpdateFrequencySet", cb: Callback<UpdateFrequencySet>): void;
  once(
    event: "UpdateFrequencySet",
    options: EventOptions,
    cb: Callback<UpdateFrequencySet>
  ): void;
}
